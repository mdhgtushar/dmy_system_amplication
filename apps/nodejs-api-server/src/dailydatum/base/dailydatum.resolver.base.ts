/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Dailydatum } from "./Dailydatum";
import { DailydatumCountArgs } from "./DailydatumCountArgs";
import { DailydatumFindManyArgs } from "./DailydatumFindManyArgs";
import { DailydatumFindUniqueArgs } from "./DailydatumFindUniqueArgs";
import { CreateDailydatumArgs } from "./CreateDailydatumArgs";
import { UpdateDailydatumArgs } from "./UpdateDailydatumArgs";
import { DeleteDailydatumArgs } from "./DeleteDailydatumArgs";
import { User } from "../../user/base/User";
import { DailydatumService } from "../dailydatum.service";
@graphql.Resolver(() => Dailydatum)
export class DailydatumResolverBase {
  constructor(protected readonly service: DailydatumService) {}

  async _dailydataMeta(
    @graphql.Args() args: DailydatumCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Dailydatum])
  async dailydata(
    @graphql.Args() args: DailydatumFindManyArgs
  ): Promise<Dailydatum[]> {
    return this.service.dailydata(args);
  }

  @graphql.Query(() => Dailydatum, { nullable: true })
  async dailydatum(
    @graphql.Args() args: DailydatumFindUniqueArgs
  ): Promise<Dailydatum | null> {
    const result = await this.service.dailydatum(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Dailydatum)
  async createDailydatum(
    @graphql.Args() args: CreateDailydatumArgs
  ): Promise<Dailydatum> {
    return await this.service.createDailydatum({
      ...args,
      data: {
        ...args.data,

        user: args.data.user
          ? {
              connect: args.data.user,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Dailydatum)
  async updateDailydatum(
    @graphql.Args() args: UpdateDailydatumArgs
  ): Promise<Dailydatum | null> {
    try {
      return await this.service.updateDailydatum({
        ...args,
        data: {
          ...args.data,

          user: args.data.user
            ? {
                connect: args.data.user,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Dailydatum)
  async deleteDailydatum(
    @graphql.Args() args: DeleteDailydatumArgs
  ): Promise<Dailydatum | null> {
    try {
      return await this.service.deleteDailydatum(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => User, {
    nullable: true,
    name: "user",
  })
  async getUser(@graphql.Parent() parent: Dailydatum): Promise<User | null> {
    const result = await this.service.getUser(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
