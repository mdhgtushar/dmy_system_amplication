/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { DailydatumService } from "../dailydatum.service";
import { DailydatumCreateInput } from "./DailydatumCreateInput";
import { Dailydatum } from "./Dailydatum";
import { DailydatumFindManyArgs } from "./DailydatumFindManyArgs";
import { DailydatumWhereUniqueInput } from "./DailydatumWhereUniqueInput";
import { DailydatumUpdateInput } from "./DailydatumUpdateInput";

export class DailydatumControllerBase {
  constructor(protected readonly service: DailydatumService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Dailydatum })
  async createDailydatum(
    @common.Body() data: DailydatumCreateInput
  ): Promise<Dailydatum> {
    return await this.service.createDailydatum({
      data: {
        ...data,

        user: data.user
          ? {
              connect: data.user,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        daydata: true,
        finance: true,
        id: true,
        note: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Dailydatum] })
  @ApiNestedQuery(DailydatumFindManyArgs)
  async dailydata(@common.Req() request: Request): Promise<Dailydatum[]> {
    const args = plainToClass(DailydatumFindManyArgs, request.query);
    return this.service.dailydata({
      ...args,
      select: {
        createdAt: true,
        date: true,
        daydata: true,
        finance: true,
        id: true,
        note: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Dailydatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async dailydatum(
    @common.Param() params: DailydatumWhereUniqueInput
  ): Promise<Dailydatum | null> {
    const result = await this.service.dailydatum({
      where: params,
      select: {
        createdAt: true,
        date: true,
        daydata: true,
        finance: true,
        id: true,
        note: true,
        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Dailydatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateDailydatum(
    @common.Param() params: DailydatumWhereUniqueInput,
    @common.Body() data: DailydatumUpdateInput
  ): Promise<Dailydatum | null> {
    try {
      return await this.service.updateDailydatum({
        where: params,
        data: {
          ...data,

          user: data.user
            ? {
                connect: data.user,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          daydata: true,
          finance: true,
          id: true,
          note: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Dailydatum })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteDailydatum(
    @common.Param() params: DailydatumWhereUniqueInput
  ): Promise<Dailydatum | null> {
    try {
      return await this.service.deleteDailydatum({
        where: params,
        select: {
          createdAt: true,
          date: true,
          daydata: true,
          finance: true,
          id: true,
          note: true,
          updatedAt: true,

          user: {
            select: {
              id: true,
            },
          },
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
