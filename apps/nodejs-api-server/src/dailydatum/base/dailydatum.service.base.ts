/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Dailydatum as PrismaDailydatum,
  User as PrismaUser,
} from "@prisma/client";

export class DailydatumServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.DailydatumCountArgs, "select">
  ): Promise<number> {
    return this.prisma.dailydatum.count(args);
  }

  async dailydata(
    args: Prisma.DailydatumFindManyArgs
  ): Promise<PrismaDailydatum[]> {
    return this.prisma.dailydatum.findMany(args);
  }
  async dailydatum(
    args: Prisma.DailydatumFindUniqueArgs
  ): Promise<PrismaDailydatum | null> {
    return this.prisma.dailydatum.findUnique(args);
  }
  async createDailydatum(
    args: Prisma.DailydatumCreateArgs
  ): Promise<PrismaDailydatum> {
    return this.prisma.dailydatum.create(args);
  }
  async updateDailydatum(
    args: Prisma.DailydatumUpdateArgs
  ): Promise<PrismaDailydatum> {
    return this.prisma.dailydatum.update(args);
  }
  async deleteDailydatum(
    args: Prisma.DailydatumDeleteArgs
  ): Promise<PrismaDailydatum> {
    return this.prisma.dailydatum.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.dailydatum
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
